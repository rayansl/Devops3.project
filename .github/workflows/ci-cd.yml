name: Maven Build & Deploy to EC2 + DockerHub

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_HOST: ${{ secrets.EC2_HOST }}
      AWS_USER: ${{ secrets.EC2_USER }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/devopshw

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🏗️ Build with Maven
        run: mvn clean package

      - name: 🔐 Decode PEM Key and Save
        run: |
          echo "${{ secrets.EC2_PEM_KEY_B64 }}" | base64 -d > key.pem
          chmod 600 key.pem

      - name: 📦 Copy JAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem target/*.jar $AWS_USER@$AWS_HOST:/home/$AWS_USER/app.jar

      - name: 🐳 Install Docker on EC2 (if not exists)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem $AWS_USER@$AWS_HOST << 'EOF'
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found. Installing..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "Docker is already installed."
            fi
          EOF

      - name: 🔐 Docker Hub Login
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: 📤 Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: 📤 Push Docker Image to Docker Hub
        run: docker push $IMAGE_NAME

      - name: 🚀Run Docker Container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem $AWS_USER@$AWS_HOST << EOF
            docker pull $IMAGE_NAME
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 8080:8080 $IMAGE_NAME
          EOF
